# -*- coding: utf-8 -*-
"""SRCNN.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18OdJOksUlRwWumSD0vTjpl25-Vvxnt7V

SRCNN on MNIST dataset.
"""

#Change directory
import os
directory = "/content/drive/MyDrive/Digit_Classification_Project"
os.chdir(directory)

#importing libraries
import numpy as np
import pandas as pd
import tensorflow as tf
from tensorflow.keras.datasets import mnist
from tensorflow.keras.models import Sequential,Model
from tensorflow.keras.layers import Conv2D,Input,AveragePooling2D
from PIL import Image as pil_image
from matplotlib import pyplot as plt

#Getting the dataset
(train_data, y_train), (test_data, y_test)=tf.keras.datasets.mnist.load_data()

#Configuring the data
train_data = train_data.astype('float32') / 255.
test_data = test_data.astype('float32') / 255.

input = Input(shape=(28,28,1))
output = AveragePooling2D()(input)

model = Model(input,output)
train_data_14 = model.predict(train_data)
test_data_14 = model.predict(test_data)

#Creating tensor for low resolution images
train_data_lr = train_data
test_data_lr = test_data

for i in range(60000):
  digit = train_data_14[i].reshape(14,14)
  digit = np.array(pil_image.fromarray(digit).resize((28,28), pil_image.BICUBIC))
  digit = digit.reshape(28,28)
  train_data_lr[i] = digit

for i in range(test_data.shape[0]) :
  digit = test_data_14[i].reshape(14,14)
  digit = np.array(pil_image.fromarray(digit).resize((28,28), pil_image.BICUBIC))
  digit = digit.reshape(28,28)
  test_data_lr[i] = digit

#Making the SRCNN model
input = Input(shape=(28, 28, 1))

x = Conv2D(64, (9, 9), padding='same', activation='relu')(input)
x = Conv2D(64, (1, 1), padding='same', activation='relu')(x)
output = Conv2D(1, (5, 5), padding='same', activation='relu')(x)

#Compiling the model
SRCNN = Model(input, output)
SRCNN.compile(loss='mean_squared_error', optimizer='adam',metrics=['accuracy'])

#Fitting the training dataset
batch_size = 256
epochs = 5
history = SRCNN.fit(train_data_lr.reshape(-1, 28, 28, 1), train_data.reshape(-1, 28, 28, 1), batch_size=batch_size, epochs=epochs, validation_split=0.1)

#Evaluting the performance
SRCNN.evaluate(test_data_lr.reshape(-1,28,28,1), test_data.reshape(-1,28,28,1))

test_data_pred = SRCNN.predict(test_data_lr.reshape(-1,28,28,1))

SRCNN.save("SRCNN.h5")

some_digit_original = test_data[5]
print("Original Image")
plt.imshow(some_digit_original,cmap='gray')

some_digit_lr = test_data_lr[5]
print("Low Resolution Image")
plt.imshow(some_digit_original,cmap='gray')

some_digit_con = test_data_pred[5]
print("Constructed High Resolution Image")
plt.imshow(some_digit_con,cmap='gray')